//INPUT required: imgsrc (for card pictures),collection(for link to card info page and API trade data call)
//library for handling API requests
$ var XMLHttpRequest = require('xhr2');

//helper functions for formatting trade tables
import {formatDateMD,capitalize,round,abbreviateAsset} from '../util/helperfunctions';

//get trades data from API

class {
    onCreate() {
        this.state = {trades: null}
    }
    onMount() {    
        var request = new XMLHttpRequest();
        var state = this.state;
        request.open('GET', this.input.apiUrl+"/"+this.input.collection+"/trades");
        request.responseType = 'json';
        // When the request loads, check whether it was successful
        request.onload = function() {
            if (request.status === 200) {
            // If successful, resolve the promise by passing back the request response
              state.trades = request.response;
            } else {
            // If it fails, reject the promise with a error message
              console.log(Error('Trades didn\'t load successfully; error'));
            }
        };
        request.send();
    }
}
<div class="row text-center" style="padding-top:10px">
    <if(state.trades)>
        <for (trade in state.trades)>
            <div class="col-xs-6 col-sm-4 col-md-3" style="padding-bottom:10px">
                <div class="recentTradesItem">
                    <a href="/"+input.collection+"/cards/"+trade.asset> 
                        <img class="img-responsive" src=input.imgsrc+"/"+trade.asset+".jpg"/>
                    </a> 
                    <!--card caption with trade details description (quantity, date, unit price)-->   
                    <div class="caption" style="word-wrap:break-word">
                        <p><span class={"text-success": trade.type == 'buy', "text-danger": trade.type == "sell"}><strong>${capitalize(trade.type)}</strong></span> ${trade.asset}</p>
                        <p><strong>${formatDateMD(trade.time)} &mdash; ${round(trade.asset_qty,3)}@ ${round(trade.payment_qty/trade.asset_qty,1)} ${abbreviateAsset(trade.payment)}/cd</strong></p>
                    </div>
                </div>
            </div>
        </for>
    </if>
</div>
style {        
    .recentTradesItem p {
        padding:0px;
        margin:0px;
    }
	div.cardBinderItem {
		padding: 5px;
	}
	.cardBinderItem .caption {
		color: black
	}
	.cardBinderItem:hover {
		background-color: #286090;
	}
	.cardBinderItem:hover .caption {
		color: #ffe990
	}
    //keep font small on small viewport so the card names fit on one line
	@media screen and (max-width: 480px) {
		.caption {
			font-size: 12px ! important
		}
		.container {
			padding:1px ! important;
		}
	}	
}
