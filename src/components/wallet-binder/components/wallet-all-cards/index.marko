//INPUT REQUIRED: collection, imgsrc
class {
    onCreate() {
        this.state = {
                apiUrl: '', loading: true, allLoading: true, cards: '', owned: '', address: '', collection:'',
        }
        console.log('wallet-all-cards component created');
    }
    //get all cards for collection
    getAllCards() {
        console.log('getting all cards');
        var XMLHttpRequest = require('xhr2');
        var request = new XMLHttpRequest();
        var state = this.state;
        var parent = this;
        var collection = collection;
        request.onreadystatechange = function() {
            if (request.readyState === XMLHttpRequest.DONE) {
                if (request.status === 200) {
                    console.log("api request loaded all cards in wallet-all-cards component");
                    state.cards = request.response;
                    state.allLoading = false;
                    var allCardCount = Object.keys(request.response).length;
                    parent.emit("all-card-total", allCardCount);
                    console.log(state.loading);
                } else {
                    console.log('error with http request to retrieve all cards');
                }
            }
        }
        request.open('GET', state.apiUrl+"/"+state.collection+"/cards");
        request.responseType = 'json';
        request.send();
    }
    onMount() {
        this.getAllCards();
    }
    //get only owned cards   
    getOwnedAssets() {
        var XMLHttpRequest = require('xhr2');
        var request = new XMLHttpRequest();
        var state = this.state;
        request.onreadystatechange = function() {
            if (request.readyState === XMLHttpRequest.DONE) {
                if (request.status === 200) {
                    console.log("api request received");
                    state.owned = request.response;
                    state.loading = false; 
                } else {
                    console.log('error with http request to get owned assets in wallet-all-cards component');
                }
            }  
        }
        request.open('GET', state.apiUrl+"/"+state.collection+"/wallet/"+state.address+"/cards");
        request.responseType = 'json';
        request.send();
    }
    //update method to execute state changes and api calls on address change
    displayWalletInfo() {
        //update loading state to true when displaying a new wallet
        this.state.loading = true;
        console.log('wallet info method');
        this.getOwnedAssets();
    }
    //calls an update method when address is received by component
    onInput(input) {
            this.state.apiUrl = input.apiUrl;
            this.state.collection = input.collection; 
            this.state.address = input.address;
            this.displayWalletInfo();
     }  
}
<div class="row" style="padding-top:10px;">
    <if(state.allLoading == false)>
        <for (card in state.cards.sort())>
            <div class="col-xs-6 col-sm-4 col-md-3 text-center" style="padding-bottom:10px">
                <div class="cardBinderItem">
                    <a href="/"+input.collection+"/cards/"+card> 
                        <img class={"img-responsive": true, "fadedImage": typeof state.owned[String(card)]=="undefined" || state.owned[String(card)] == 0} src=input.imgsrc+"/"+card+".jpg"/>
                        <if (state.owned[String(card)] > 0)>
                        <div class="caption" style="word-wrap:break-word"><strong>${state.owned[String(card)]}x ${card}</strong></div>
                        </if>
                        <else>  
                            <div class="caption" style="word-wrap:break-word"><strong><span style="opacity:.6">${card}</span></strong></div>  
                        </else>
                    </a>
                </div>
            </div>
        </for>
    </if>
</div>

style {
    .fadedImage {
        opacity: .4;
        filter: alpha(opacity=40);
    }
	div.cardBinderItem {
		padding: 5px;
	    font-size:14px;
    }
	.cardBinderItem .caption {
		color: black
	}
	.cardBinderItem:hover {
		background-color: #286090;
	}
	.cardBinderItem:hover .caption {
		color: #ffe990
	}
	@media screen and (max-width: 480px) {
		.caption {
			font-size: 12px ! important
		}
		.container {
			padding:1px ! important;
		}
	}
}
